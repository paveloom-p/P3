Замечания
=========

Называть makefile именем с расширением .f95, например, make.f95
невыгодно, т.к. при создании большого проекта и использования шаблонов,
компилятор будет воспринимать этот файл как ФОРТРАНовский.


Вообще-то ЧЕТВЁРТОЕ домашнее задание было по теме размещаемые массивы.
                                                  ====================
(по крайней мере давалось после лекции по упомянутой теме, что и
подразумевало её использование при решении задач)

Задача 1
========

Поэтому, пожалуйста, модифицируйте первую задачу так:

1)  опишите переменную, например, K, которая должна будет хранить
    число элементов вектора N;

2) опишите вектор N, как размещаемый;

3) выделите под него память посредством оператора allocate,
   причём желательно с необязательным фактическим аргументом IER,
   имеющим ключевое имя STAT;
           ============

4) проверьте, что выделение памяти прошло успешно посредством:

    if (ier/=0) then; write(*,*) 'ier=',ier,' do not allocate array!'
                      stop 1
    endif
    
5) после чего введите массив N, выведите его содержимое и результат
   работы функции task1(N).
 
   При выводе вектора дескриптор умолчания, конечно неудобен,
    поскольку часть элементов уползёт за правый край экрана.
    Гораздо удобнее, в данной ситуации

    write(*,'(a,5i3)') 'Введён вектор n:', n  

    Правда, тут возникает вопрос: А что делать, если число элементов
    вектора заранее неизвестно, т.е. что писать перед i3 вместо 5.
    
    Есть два ответа. Первый предполагает априорную информацию о том,
                     что число элементов не может быть больше, например,
                     1000. В этом случае можем смело писать
                     
    write(*,'(a,1000i3)') 'Введён вектор n:', n  
                     
    Выведется ровно столько элементов, сколько было зафрахтовано оператором
    allocate, т.е. K.
    
    Второй вариант более принципиальный --- связан с тем, что повторитель,
    стоящий перед i3 должен быть обязательно равен K.
    
    Старый ФОРТРАН не допускал имени переменной в качестве повторителя 
    формата. Некоторые современные компиляторы допускают очень практичную
    конструкцию вида
                         write(*,'(a,<K>i3)')

    где K уже имя переменной целого типа. К сожалению, gfortran отверг
    подобную возможность, переложив на программиста своими силами и
    интеллектов организовать динамический повторитель, что, конечно,
    тоже возможно. Причём техника такой организации касается не только
    повторителей, но любых констант, которые могут встретится в операторе
    формат. Очень полезно приобрести навыки использования подобной техники.
    
    Делается так:
    
      1) пишется оператор   write(sk,'(i3)') K
    
         Тут sk --- символьная переменная, способная хранить 3 символа
                    (в принципе неважно сколько, но пока возьмём 3, т.е.
                     гарантируем, что K не больше 999.)

                     В описаниях должно быть: character(3) sk
                     
Как видите, ФОРТРАН допускает в качестве имени файла, в который хотим что-то
записать, использовать символьную переменную. Весь фокус в том, что в этом
случае можно использовать всю мощь оператора FORMAT. В частности, в памяти
ЭВМ значение переменной K хранится в двоичном коде, но, указав формат i3,
мы, тем самым, потребовали перевести двоичное число в десятичную систему
счисления (т.е. получить символы, изображающие в десятичной системе число K).
Так что в переменной sk окажется запись числа K в десятичной системе.

Поскольку sk переменная типа character, то её можно включать в алгоритм
построения новых строк, если таковой потребуется. Именно это нам и нужно:
нужно получить форматную строку, состоящую из сцепки (конкатенации) трёх
строк:
        '('  '33'  'i3)'   (если, например, k=33)
        
Делается это так    sf='('//sk//'i3)'

Здесь  sf ещё одна символьная переменная из какого-то количества символов
которое, может быть, не очень большим, например, 60.    (character(60) sf) 

// --- операция конкатенации (сцепки) строк

Так что после   write(*,trim(sf)) N    повторитель фопмата будет тот,
который нужен.


 ПОЖАЛУЙСТА, сделайте все задачки этого задания с учётом темы 
 
 1) Размещаемые массивы.
 
 2) Желательно каждую задачу в отдельной директории
 
 3) Поработайте с предоженным мной Makefile
 
 4) Причешите функции quadra
 
 5) Посмотрите замечания к адгоритму слияния двух упорядоченных файлов в один
    упорядоченный и реализуйте эту схему. 